{"version":3,"sources":["logo.svg","components/canvas.jsx","components/image.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Canvas","state","canvasStyle","marginRight","renderImage","canvas","refs","context","getContext","clearRect","width","height","img","memeImg","props","data","imageURL","hRatio","vRatio","ratio","Math","min","drawImage","font","fillText","topText","bottomText","style","this","ref","border","src","alt","display","onLoad","textAlign","href","className","onClick","e","handleDownloadImage","toDataURL","Component","Image","imageStyle","flexDirection","elementStyle","margin","type","accept","onChange","handleImageChange","placeholder","id","handleTextChange","App","imageName","topFont","bottomFont","toDownload","appStyle","marginLeft","file_element","target","files","length","URL","createObjectURL","name","console","log","setState","text_elem","value","canvasURL","downloadButton","download","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8KAAAA,EAAOC,QAAU,IAA0B,kC,sICyF5BC,G,wNArFbC,MAAQ,G,EAERC,YAAc,CACZC,YAAa,Q,EAGfC,YAAc,WACZ,IAAMC,EAAS,EAAKC,KAAKD,OACzB,GAAIA,EAAQ,CACV,IAAME,EAAUF,EAAOG,WAAW,MAElCD,EAAQE,UAAU,EAAG,EAAGJ,EAAOK,MAAOL,EAAOM,QAC7C,IAAIC,EAAM,EAAKN,KAAKO,QAGpB,GAAiB,KAFI,EAAKC,MAAMC,KAAxBC,SAEa,CACnB,IAAIC,EAASZ,EAAOK,MAAQE,EAAIF,MAC5BQ,EAASb,EAAOM,OAASC,EAAID,OAC7BQ,EAAQC,KAAKC,IAAIJ,EAAQC,GAE7BX,EAAQe,UACNV,EACA,EACA,EACAA,EAAIF,MACJE,EAAID,OACJ,EACA,EACAC,EAAIF,MAAQS,EACZP,EAAID,OAASQ,GAGjBZ,EAAQgB,KAAO,eAEfhB,EAAQiB,SACN,EAAKV,MAAMC,KAAKU,QAEhBpB,EAAOK,MAAQ,EACfL,EAAOM,OAAS,IAElBJ,EAAQgB,KAAO,eAEfhB,EAAQiB,SACN,EAAKV,MAAMC,KAAKW,WAEhBrB,EAAOK,MAAQ,EACfL,EAAOM,OAAS,M,uDAKZ,IAAD,OACP,OACE,yBAAKgB,MAAOC,KAAK1B,aACf,qCACA,4BACE2B,IAAI,SACJF,MAAO,CAAEG,OAAQ,mBACjBpB,MAAM,MACNC,OAAO,QAET,yBACEkB,IAAI,UACJE,IAAKH,KAAKd,MAAMC,KAAKC,SACrBgB,IAAI,aACJL,MAAO,CAAEM,QAAS,QAClBC,OAAQN,KAAKxB,cAEf,6BACA,uBACEuB,MAAO,CAAEQ,UAAW,SACpBC,KAAK,IACLC,UAAU,kBACVC,QAAS,SAACC,GAAD,OACP,EAAKzB,MAAM0B,oBAAoBD,EAAG,EAAKjC,KAAKD,OAAOoC,eALvD,YAUCb,KAAKxB,mB,GAhFOsC,cCwCNC,E,4MAxCb1C,MAAQ,G,EAER2C,WAAa,CACXX,QAAS,OACTY,cAAe,U,EAGjBC,aAAe,CACbC,OAAQ,O,uDAIR,OACE,yBAAKpB,MAAOC,KAAKgB,YACf,2CACA,2BACEjB,MAAOC,KAAKkB,aACZE,KAAK,OACLC,OAAO,wBACPC,SAAUtB,KAAKd,MAAMqC,oBAEvB,2BACExB,MAAOC,KAAKkB,aACZE,KAAK,OACLI,YAAY,WACZC,GAAG,UACHH,SAAUtB,KAAKd,MAAMwC,mBAEvB,2BACE3B,MAAOC,KAAKkB,aACZE,KAAK,OACLI,YAAY,cACZC,GAAG,aACHH,SAAUtB,KAAKd,MAAMwC,wB,GAlCXZ,aCmELa,E,4MA9DbtD,MAAQ,CACNe,SAAU,GACVwC,UAAW,GACX/B,QAAS,GACTC,WAAY,GACZ+B,QAAS,GACTC,WAAY,GACZC,YAAY,G,EAGdC,SAAW,CACT3B,QAAS,OACTY,cAAe,MACfgB,WAAY,O,EAGdV,kBAAoB,SAACZ,GACnB,IAAMuB,EAAevB,EAAEwB,OACvB,GAAkC,IAA9BD,EAAaE,MAAMC,OAAc,CAEnC,IAAMjD,EAAWkD,IAAIC,gBAAgBL,EAAaE,MAAM,IAClDR,EAAYM,EAAaE,MAAM,GAAGI,KACxCC,QAAQC,IAAItD,GACZ,EAAKuD,SAAS,CAAEvD,SAAUA,EAAUwC,UAAWA,M,EAInDF,iBAAmB,SAACf,GAClB,IAAMiC,EAAYjC,EAAEwB,OACpB,EAAKQ,SAAL,eACGC,EAAUnB,GAAKmB,EAAUC,S,EAI9BjC,oBAAsB,SAACD,EAAGmC,GACxB,IAAMC,EAAiBpC,EAAEwB,OAEzBY,EAAevC,KAAOsC,EACtBC,EAAeC,SAAW,EAAK3E,MAAMuD,UACrCa,QAAQC,IAAIK,I,uDAIZ,OACE,6BACE,wBAAItB,GAAG,UAAP,kBACA,yBAAK1B,MAAOC,KAAKgC,UACf,kBAAC,EAAD,CACE7C,KAAMa,KAAK3B,MACXuC,oBAAqBZ,KAAKY,sBAE5B,kBAAC,EAAD,CACEzB,KAAMa,KAAK3B,MACXkD,kBAAmBvB,KAAKuB,kBACxBG,iBAAkB1B,KAAK0B,yB,GAvDjBZ,aCMEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCJNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.bb881ca8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport { createElement } from \"react\";\r\n\r\nclass Canvas extends Component {\r\n  state = {};\r\n\r\n  canvasStyle = {\r\n    marginRight: \"20px\",\r\n  };\r\n\r\n  renderImage = () => {\r\n    const canvas = this.refs.canvas;\r\n    if (canvas) {\r\n      const context = canvas.getContext(\"2d\");\r\n      // Clear the canvas\r\n      context.clearRect(0, 0, canvas.width, canvas.height);\r\n      var img = this.refs.memeImg;\r\n      const { imageURL } = this.props.data;\r\n\r\n      if (imageURL !== \"\") {\r\n        var hRatio = canvas.width / img.width;\r\n        var vRatio = canvas.height / img.height;\r\n        var ratio = Math.min(hRatio, vRatio);\r\n        //   Scaling the image to fit the 500x500 canvas\r\n        context.drawImage(\r\n          img,\r\n          0,\r\n          0,\r\n          img.width,\r\n          img.height,\r\n          0,\r\n          0,\r\n          img.width * ratio,\r\n          img.height * ratio\r\n        );\r\n      }\r\n      context.font = \"20pt Calibri\";\r\n      //   Top Text\r\n      context.fillText(\r\n        this.props.data.topText,\r\n        // \"Top Text Here\",\r\n        canvas.width / 5,\r\n        canvas.height / 10\r\n      );\r\n      context.font = \"20pt Calibri\";\r\n      //   Bottom Text\r\n      context.fillText(\r\n        this.props.data.bottomText,\r\n        // \"Bottom Text Here\",\r\n        canvas.width / 5,\r\n        canvas.height - 30\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={this.canvasStyle}>\r\n        <p>Canvas</p>\r\n        <canvas\r\n          ref=\"canvas\"\r\n          style={{ border: \"1px solid black\" }}\r\n          width=\"500\"\r\n          height=\"500\"\r\n        ></canvas>\r\n        <img\r\n          ref=\"memeImg\"\r\n          src={this.props.data.imageURL}\r\n          alt=\"Meme Image\"\r\n          style={{ display: \"none\" }}\r\n          onLoad={this.renderImage}\r\n        />\r\n        <br />\r\n        <a\r\n          style={{ textAlign: \"right\" }}\r\n          href=\"#\"\r\n          className=\"btn btn-primary\"\r\n          onClick={(e) =>\r\n            this.props.handleDownloadImage(e, this.refs.canvas.toDataURL())\r\n          }\r\n        >\r\n          Download\r\n        </a>\r\n        {this.renderImage()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Canvas;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Image extends Component {\r\n  state = {};\r\n\r\n  imageStyle = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  };\r\n\r\n  elementStyle = {\r\n    margin: \"5px\",\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={this.imageStyle}>\r\n        <p>Upload Image</p>\r\n        <input\r\n          style={this.elementStyle}\r\n          type=\"file\"\r\n          accept=\"image/png, image/jpeg\"\r\n          onChange={this.props.handleImageChange}\r\n        />\r\n        <input\r\n          style={this.elementStyle}\r\n          type=\"text\"\r\n          placeholder=\"Top Text\"\r\n          id=\"topText\"\r\n          onChange={this.props.handleTextChange}\r\n        />\r\n        <input\r\n          style={this.elementStyle}\r\n          type=\"text\"\r\n          placeholder=\"Bottom Text\"\r\n          id=\"bottomText\"\r\n          onChange={this.props.handleTextChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Image;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Canvas from \"./components/canvas\";\nimport Image from \"./components/image\";\n\nclass App extends Component {\n  state = {\n    imageURL: \"\",\n    imageName: \"\",\n    topText: \"\",\n    bottomText: \"\",\n    topFont: \"\",\n    bottomFont: \"\",\n    toDownload: false,\n  };\n\n  appStyle = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginLeft: \"10%\",\n  };\n\n  handleImageChange = (e) => {\n    const file_element = e.target;\n    if (file_element.files.length !== 0) {\n      // console.log(file_element.files[0].name);\n      const imageURL = URL.createObjectURL(file_element.files[0]);\n      const imageName = file_element.files[0].name;\n      console.log(imageURL);\n      this.setState({ imageURL: imageURL, imageName: imageName });\n    }\n  };\n\n  handleTextChange = (e) => {\n    const text_elem = e.target;\n    this.setState({\n      [text_elem.id]: text_elem.value,\n    });\n  };\n\n  handleDownloadImage = (e, canvasURL) => {\n    const downloadButton = e.target;\n    // console.log(downloadButton);\n    downloadButton.href = canvasURL;\n    downloadButton.download = this.state.imageName;\n    console.log(downloadButton);\n  };\n\n  render() {\n    return (\n      <div>\n        <h1 id=\"header\">Meme Generator</h1>\n        <div style={this.appStyle}>\n          <Canvas\n            data={this.state}\n            handleDownloadImage={this.handleDownloadImage}\n          />\n          <Image\n            data={this.state}\n            handleImageChange={this.handleImageChange}\n            handleTextChange={this.handleTextChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}